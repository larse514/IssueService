"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _brush = require("./brush");

var _brush2 = _interopRequireDefault(_brush);

var _util = require("util");

var _util2 = _interopRequireDefault(_util);

var _utils = require("./utils");

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var red = _brush2.default.red;
var grey = _brush2.default.grey;
var cyan = _brush2.default.cyan;
var green = _brush2.default.green;
var underline = _brush2.default.underline;
var inspect = _util2.default.inspect;
var isArray = _utils2.default.isArray;

var regCleanStack = /^.+(\/node_modules\/|(node\.js:\d+:\d+)).+\n?/mg;
var regIndent = /^/mg;

function indent(str) {
    return (str + "").replace(regIndent, "  ");
}

function log(type) {
    return function () {
        /* istanbul ignore next */
        if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") {
            var mainElem = window["junit-reporter"];
            if (mainElem) {
                var pre = document.createElement("pre");
                pre.style.fontFamily = "Monaco, \"Lucida Console\", Courier";
                for (var i = 0; i < arguments.length; i++) {
                    var span = document.createElement("span");
                    span.innerHTML = arguments[i] + " ";
                    pre.appendChild(span);
                }
                mainElem.appendChild(pre);
            } else {
                alert("JUnit: You must add a '<div id=\"junit-reporter\"></div>' element to the DOM");
            }
        } else {
            console[type].apply(console, arguments);
        }
    };
}

function inspectObj(obj) {
    if (typeof obj === "string") return obj;

    /* istanbul ignore else */
    if (typeof window === "undefined") return inspect(obj, { depth: 7, colors: true });else return JSON.stringify(obj, 0, 4);
}

function formatMsg(msg) {
    if (isArray(msg)) return msg.join(grey(" - "));else return msg;
}

var _logPass = log("log");
var _logFail = log("error");
var _logFinal = log("info");

exports.default = function () {
    var pt = arguments.length <= 0 || arguments[0] === undefined ? underline(grey("junit >")) : arguments[0];

    return {
        formatAssertErr: function formatAssertErr(actual, expected) {
            var _ref = new Error("Assertion");

            var stack = _ref.stack;

            stack = stack && stack.replace(regCleanStack, "");

            return indent(red("\n<<<<<<< actual") + "\n" + (inspectObj(actual) + "\n") + (red("=======") + "\n") + (inspectObj(expected) + "\n") + (red(">>>>>>> expected") + "\n\n") + grey(stack));
        },

        logPass: function logPass(msg, span) {
            _logPass(pt, green("o"), formatMsg(msg), grey("(" + span + "ms)"));
        },

        logFail: function logFail(msg, err, span) {
            err = err instanceof Error ? indent(err.stack ? err.stack : err.message) : inspectObj(err);

            _logFail(pt + " " + red("x") + " " + formatMsg(msg) + " " + grey("(" + span + "ms)") + ("\n" + err + "\n"));
        },

        logFinal: function logFinal(total, tested, passed, failed) {
            _logFinal(pt + " " + cyan("tested") + " " + tested + " / " + total + "\n" + (pt + " " + cyan("passed") + " " + green(passed) + "\n") + (pt + " " + cyan("failed") + " " + red(failed)));
        }
    };
};