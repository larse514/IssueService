"use strict";

var _commander = require("commander");

var _commander2 = _interopRequireDefault(_commander);

var _nofs = require("nofs");

var _nofs2 = _interopRequireDefault(_nofs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _brush = require("./brush");

var _brush2 = _interopRequireDefault(_brush);

var _ = require("./");

var _2 = _interopRequireDefault(_);

var _reporter = require("./reporter");

var _reporter2 = _interopRequireDefault(_reporter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var subArgIndex = process.argv.indexOf("--");

/* istanbul ignore if */
if (subArgIndex > -1) {
    // This is hotfix of the Commander.js bug.
    process.argv.splice(subArgIndex, 1);
}

_commander2.default.description("junit cli tool to run tests automatically").usage("[options] [file | pattern...]").option("-o --reporter <module>", "a reporter module [{ formatAssertErr, logPass, logFail, logFinal }]", null).option("-r, --requires <str>", "pre-require modules [babel-core/register,babel-polyfill]", "babel-core/register,babel-polyfill").option("-g, --grep <pattern>", "only run tests matching the pattern", "").option("-t, --timeout <num>", "case timeout in milliseconds [5000]", parseInt).option("-b, --isBail", "bail after first test failure [true]").option("-f, --isFailOnUnhandled", "failed on unhandled exception [true]").option("-p, --prompt <str>", "the prompt string ['junit cli >']", _brush2.default.underline(_brush2.default.grey("junit cli >"))).on("--help",
/* istanbul ignore next */
function () {
    console.log("  Examples:\n\n" + "    junit test/*.js\n" + "    junit test.es7.js\n" + "    junit -r coffee-script test.coffee\n" + "    noe -b junit -w '*.js' -- test.js\n");
}).parse(process.argv);

try {
    _commander2.default.requires.split(",").map(require);
} catch (err) {
    /* istanbul ignore next */
    null;
}

var testReg = new RegExp(_commander2.default.grep);
var reporter = undefined;

/* istanbul ignore next */
function loadModule(name) {
    try {
        return require.resolve(name);
    } catch (err) {
        var mod = require(_path2.default.resolve(name));
        mod = typeof mod === "function" ? mod : mod.default;
        return mod;
    }
}

function run() {
    // reporter hook
    /* istanbul ignore if */
    if (_commander2.default.reporter) {
        reporter = loadModule(_commander2.default.reporter);
    } else {
        reporter = (0, _reporter2.default)(_commander2.default.prompt);
    }

    var it = (0, _2.default)({
        filter: function filter(msg) {
            return testReg.test(msg);
        },
        reporter: reporter,
        isBail: _commander2.default.isBail,
        isThrowOnFinal: false,
        isFailOnUnhandled: _commander2.default.isFailOnUnhandled,
        timeout: _commander2.default.timeout || 5000
    });

    return _nofs2.default.glob(_commander2.default.args, {
        iter: function iter(_ref) {
            var path = _ref.path;

            var mod = require(_path2.default.resolve(path));
            return (typeof mod === "function" ? mod : mod.default)(it);
        }
    }).then(it.run).then(function (_ref2) {
        var failed = _ref2.failed;

        /* istanbul ignore next */
        if (failed) process.exit(1);
    });
}

run();